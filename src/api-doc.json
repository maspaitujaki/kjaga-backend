{
    "openapi":"3.0.0",
    "info": {
      "title":"Swagger Kjaga Backend",
      "version":"1.0",
      "description": "Documentation for Kjaga backend",
      "contact": {
        "name": "Dimas Faidh Muzaki",
        "email": "dimasfaid@gmail.com"
      }
    },
    "servers": [
      {
        "url":"http://localhost:3001",
        "description": "local"
      },
      {
        "url": "https://kjaga-dev-vpzh6hrtya-et.a.run.app",
        "description": "Dev Cloud Run"
      }
    ],
    "externalDocs": {
      "url": "https://github.com/maspaitujaki/backend-capstone-bangkit",
      "description": "Private Repository"
    },
    "tags": [
      {
        "name": "User",
        "description": "Operations about user"
      },
      {
        "name": "Food",
        "description": "Operations about food and portions"
      },
      {
        "name": "Prediction",
        "description": "Operations involving the AI for food recognition"
      },
      {
        "name": "Tracker",
        "description": "Operations involving meal history and nutrition"
      }
    ],
    "paths": {
      "/users": {
        "post": {
          "operationId": "createUser",
          "tags": ["User"],
          "description": "Use as register",
          "summary": "Create a user",
          "requestBody" : {
            "required": true,
            "content": {
              "application/x-www-form-urlencoded": {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "email" : {
                      "type": "string",
                      "format": "email"
                    },
                    "name" : {
                      "type": "string"
                    },
                    "password" : {
                      "type": "string"
                    },
                    "confirmPassword" : {
                      "type": "string"
                    }
                  },
                  "required": ["email", "name", "password", "confirmPassword"]
                }
              },
              "application/json": {
                "schema" : {
                  "type": "object",
                  "properties": {
                    "email" : {
                      "type": "string",
                      "format": "email"
                    },
                    "name" : {
                      "type": "string"
                    },
                    "password" : {
                      "type": "string"
                    },
                    "confirmPassword" : {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201" : {
              "description": "User successfully created",
              "content": {
                "application/json": {
                  "schema" : {
                    "type": "object",
                    "properties": {
                      "error":{
                        "type": "boolean"
                      },
                      "id" : {
                        "type": "string"
                      },
                      "email" : {
                        "type": "string",
                        "format": "email"
                      },
                      "name" : {
                        "type": "string"
                      },
                      "created_at": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              } 
            },
            "400" : {
              "description": "Email already registered",
              "content": {
                "application/json": {
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }
        },
        "get": {
          "operationId": "readUserByAuth",
          "summary": "Get user info by auth token",
          "tags": ["User"],
          "security": [
            {
              "bearerAuth" : []
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            },
            "401": {
              "$ref" : "#/components/responses/UnauthorizedError"
            }
          }
        }
      },
      "/users/login": {
        "post": {
          "operationId": "loginUser",
          "tags": ["User"],
          "description": "Use as sign in",
          "summary": "Logs user into the system",
          "requestBody":{
            "required": true,
            "content": {
              "application/json":{
                "schema":{
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "password":{
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200" : {
              "description": "Successfully logged in",
              "content": {
                "application/json": {
                  "schema" : {
                    "type": "object",
                    "properties": {
                      "error":{
                        "type": "boolean"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "id" : {
                            "type": "string"
                          },
                          "email" : {
                            "type": "string",
                            "format": "email"
                          },
                          "Name" : {
                            "type": "string"
                          }
                        }
                      },
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "401" : {
              "description": "Combination of email and password is not found",
              "content": {
                "application/json": {
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }
        }
      },
      "/users/loginV2": {
        "post": {
          "operationId": "loginUserV2",
          "tags": ["User"],
          "description": "Use as sign in",
          "summary": "Logs user into the system",
          "parameters": [
            {
              "name": "email",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "password",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200" : {
              "description": "Successfully logged in",
              "content": {
                "application/json": {
                  "schema" : {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "object",
                        "properties": {
                          "id" : {
                            "type": "string"
                          },
                          "email" : {
                            "type": "string",
                            "format": "email"
                          },
                          "Name" : {
                            "type": "string"
                          }
                        }
                      },
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "401" : {
              "description": "Combination of email and password is not found",
              "content": {
                "application/json": {
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}":{
        "get": {
          "operationId": "readUserById",
          "tags": ["User"],
          "description": "",
          "summary": "Get user by user Id",
          "parameters": [{
            "$ref": "#/components/parameters/userId"
          }],
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            },
            "400": {
              "description": "User not exist",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }     
        },
        "put": {
          "operationId": "updateUserById",
          "tags": ["User"],
          "description": "",
          "summary": "Update user by Id, certain field only",
          "parameters": [{
            "$ref": "#/components/parameters/userId"
          }],
          "requestBody":{
            "required": true,
            "content": {
              "application/x-www-form-urlencoded":{
                "schema":{
                  "type": "object",
                  "properties": {
                    "email":{
                      "type": "string",
                      "format": "email"
                    },
                    "name":{
                      "type": "string"
                    },
                    "gender": {
                      "type": "string",
                      "enum": ["male","female"]
                    },
                    "birthdate":{
                      "type": "string",
                      "format": "date"
                    }
                  },
                  "required": ["email", "name", "gender", "birthdate"]
                }
              },
              "application/json":{
                "schema":{
                  "type": "object",
                  "properties": {
                    "email":{
                      "type": "string",
                      "format": "email"
                    },
                    "name":{
                      "type": "string"
                    },
                    "gender": {
                      "type": "string",
                      "enum": ["male","female"]
                    },
                    "birthdate":{
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            },
            "400": {
              "description": "User not exist",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }        
        },
        "delete": {
          "operationId": "deleteUserById",
          "tags": ["User"],
          "description": "",
          "summary": "Delete user by user's id",
          "parameters": [{
            "$ref": "#/components/parameters/userId"
          }],
          "responses": {
            "200":{
              "description": "Successfully deleted",
              "content": {
                "application/json":{
                  "schema":{
                    "type": "object",
                    "properties": {
                      "message":{
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "User not exist",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }       
        } 
      },
      "/foods":{
        "get":{
          "operationId": "getFoods",
          "description": "Search foods",
          "tags": ["Food"],
          "parameters": [
            {
              "schema" : {
                "type": "string"
              },
              "in": "query",
              "name": "search",
              "description": "Search food by name"
            }
          ],
          "responses": {
            "200": {
              "description": "Return a list of foods according to search query. If query is empty then return all. . Note that the portion is default portion",
              "content": {
                "application/json":{
                  "schema" :{
                    "type": "object",
                    "properties": {
                      "count": { 
                        "type": "integer"
                      },
                      "foods" : {
                        "type": "array",
                        "items" : {
                          "type": "object",
                          "properties": {
                            "food": {
                              "$ref": "#/components/schemas/food"
                            },
                            "portion_count":{
                              "description": "How many available portion for this food",
                              "type": "integer"
                            }, 
                            "portion":{
                              "$ref": "#/components/schemas/portion"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/foods/{food_id}/portions": {
        "get":{
          "operationId": "getPortionByFoodId",
          "tags": ["Food"],
          "parameters": [
            {
              "name": "food_id",
              "description": "The food id",
              "in": "path",
              "required": true,
              "schema" : {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200":{
              "description": "Return the portion that available for a food",
              "content": {
                "application/json":{
                  "schema":{
                    "type": "object",
                    "properties": {
                      "food":{
                        "$ref": "#/components/schemas/food"
                      },
                      "portions":{
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/portion"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Food not exist",
              "content": {
                "application/json":{
                  "schema":{
                    "$ref": "#/components/schemas/errorMessage"
                  }
                }
              }
            }
          }
        }
      },
      "/predict" : {
        "get": {
          "summary": "This operation will return a signed url for the app to upload image directly into storage",
          "operationId": "getUploadImageSignedUrl",
          "tags": ["Prediction"],
          "security": [
            {
              "bearerAuth" : []
            }
          ],
          "parameters": [
            {
              "name": "mime_type",
              "description": "Content Type / Mime Type of the image that will be uploaded. Limited to 'image/png' and 'image/jpeg'",
              "required": true,
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return a signed url for client to upload image to cloud storage",
              "content": {
                "application/josn": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "predict_id": {
                        "type": "string"
                      },
                      "content_type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "description": "Use this url to upload image to storage. Use PUT verb and content type provided"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "$ref" : "#/components/responses/UnauthorizedError"
            }
          }
        }
      },
      "/predict/{predict_id}":{
        "post": {
          "summary": "Do not use, this endpoint is for cloud trigger",
          "tags": ["Prediction"],
          "parameters": [
            {
              "required": true,
              "name": "predict_id",
              "schema":{
                "type": "string"
              },
              "in": "path"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timeCreated":{
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success"
            }
          }
        }
      },
      "/meal-diaries":{
        "get":{
          "operationId": "getMealDiaries",
          "tags": ["Tracker"],
          "summary": "Get the nutrition and meal diary for a particular day of a user",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/diaryDate"
            }
          ],
          "responses": {
            "200":{
              "description": "It will return an object that contain totalNutrition for the selected date and four types of meal (breakfast, lunch, dinner, and snack). Also, each meal type has their own totalNutrition. breakfast.items[].nutrition is the nutrition of the food for specified portion that already calculated againts the quantity",
              "content": {
                "application/json":{
                  "schema": {
                    "type": "object",
                    "properties": {
                      "totalNutrition":{
                        "$ref": "#/components/schemas/nutrition"
                      },
                      "breakfast":{
                        "$ref": "#/components/schemas/mealDiariesReportPerType"
                      },
                      "lunch":{
                        "$ref": "#/components/schemas/mealDiariesReportPerType"
                      },
                      "dinner":{
                        "$ref": "#/components/schemas/mealDiariesReportPerType"
                      },
                      "snack":{
                        "$ref": "#/components/schemas/mealDiariesReportPerType"
                      },
                      "akg": {
                        "$ref": "#/components/schemas/nutrition"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": ["Tracker"],
          "summary": "Add new meal consumption diaries",
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/diaryDate"
            },
            {
              "required": true,
              "name": "mealType",
              "description": "Meal type (breakfast, lunch, dinner, or snack)",
              "schema":{
                "type": "string",
                "enum": ["breakfast", "lunch", "dinner", "snack"]
              },
              "in": "query"
            }
          ],
          "requestBody":{
            "content": {
              "application/x-www-form-urlencoded":{
                "schema": {
                  "$ref": "#/components/schemas/createDiaryRequestItem"
                }
              },
              "application/json":{
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/createDiaryRequestItem"
                      }
                    }
                  }
                },
                "example": {
                  "items": [
                    {
                      "foodId": 2449,
                      "portionId": 2692,
                      "quantity": 1
                    },
                    {
                      "foodId": 2449,
                      "portionId": 4772,
                      "quantity": 2.5
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "",
              "content": {
                "application/json": {
                  "schema":{
                    "type": "object",
                    "properties": {
                      
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth" :{
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "description": "Enter the token from login \/ register"
        }
      },
      "responses": {
        "UnauthorizedError": {
          "description": "Access token is missing or invalid"
        }
      },
      "parameters": {
        "userId": {
          "schema":{
            "type": "string"
          },
          "in": "path",
          "name": "id",
          "description": "User's Id to be operated on",
          "required": true
        },
        "diaryDate": {
          "name": "date",
          "description": "Date of the diary (YYYY-MM-DD). If not provided, then the default is today based on server time",
          "in": "query",
          "required": false,
          "schema":{
            "type": "string",
            "format": "date"
          }
        }
      },
      "schemas": {
        "errorMessage": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        "user": {
          "type": "object",
          "properties": {
            "user":{
              "type": "object",
              "properties": {
                "id" : {
                  "type": "string"
                },
                "email" : {
                  "type": "string",
                  "format": "email"
                },
                "name" : {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "enum": ["pria","wanita"]
                },
                "birthdate":{
                  "type": "string",
                  "format": "date"
                },
                "age":{
                  "type": "integer"
                },
                "akg_type":{
                  "type": "string"
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "updated_at": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        },
        "mealDiariesItem": {
          "type": "object",
          "properties": {
            "food": {
              "$ref": "#/components/schemas/food"
            },
            "portion": {
              "type": "object",
              "properties": {
                "id":{
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "nutrition":{
              "$ref": "#/components/schemas/nutrition"
            },
            "quantity": {
              "type": "number"
            }
          }
        },
        "mealDiariesReportPerType": {
          "type": "object",
          "properties": {
            "totalNutrition":{
              "$ref": "#/components/schemas/nutrition"
            },
            "items": {
              "type": "array",
              "items":{
                "$ref": "#/components/schemas/mealDiariesItem"
              }
            }
          }
        },
        "nutrition": {
          "type": "object",
          "properties": {
            "energy(kkal)" : {
              "type": "number"
            },
            "fat(g)" : {
              "type": "number"
            },
            "cholesterol(mg)" : {
              "type": "number"
            },
            "protein(g)" : {
              "type": "number"
            },
            "carbohydrates(g)" : {
              "type": "number"
            },
            "fiber(g)" : {
              "type": "number"
            },
            "sugar(g)" : {
              "type": "number"
            },
            "sodium(mg)" : {
              "type": "number"
            },
            "kalium(mg)" : {
              "type": "number"
            }
          }
        },
        "portion":{
          "type": "object",
          "properties": {
            "id":{
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "nutrition":{
              "$ref": "#/components/schemas/nutrition"
            }
          }
        },
        "food":{
          "type": "object",
          "properties": {
            "id":{
              "type": "string"
            },
            "name":{
              "type": "string"
            }
          }
        },
        "createDiaryRequestItem": {
          "type": "object",
          "properties": {
            "foodId": {
              "type": "integer"
            },
            "portionId": {
              "type": "integer"
            },
            "quantity": {
              "type": "number"
            }
          },
          "required": ["foodId", "portionId", "quantity"]
        }
      }
    }
  }